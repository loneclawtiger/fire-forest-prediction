# -*- coding: utf-8 -*-
"""ML-CAC-2-2247236.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W_yrdOoPObWcJLizbgnX6MTVu_qrp6S6
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['forestfires.csv']), encoding='cp1252')
df.head()

# Extract the features
X = df.iloc[:, 4:12].values

# Choose the number of clusters
k = 3

# Create a k-means clustering object
kmeans = KMeans(n_clusters=k, init='k-means++', random_state=0)

# Fit the k-means clustering object on the features
y_kmeans = kmeans.fit_predict(X)

# Plot the results
plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')
plt.title('Forest Fire Clusters')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.show()

from sklearn.cluster import AgglomerativeClustering

# Extract the features
X = df.iloc[:, 4:12].values

# Choose the number of clusters
k = 3

# Create an agglomerative clustering object
agg_clustering = AgglomerativeClustering(n_clusters=k, linkage='ward')

# Fit the agglomerative clustering object on the features
y_agg = agg_clustering.fit_predict(X)

# Plot the results
plt.scatter(X[y_agg == 0, 0], X[y_agg == 0, 1], s = 100, c = 'red', label = 'Cluster 1')
plt.scatter(X[y_agg == 1, 0], X[y_agg == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_agg == 2, 0], X[y_agg == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.title('Forest Fire Clusters')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Create a new column to bin the fire areas into categories
bins = [-np.inf, 5, 10, 20, 50, np.inf]
labels = ['1', '2', '3', '4', '5']
df['area_category'] = pd.cut(df['area'], bins=bins, labels=labels)

# Extract the features and target variable
X = df.iloc[:, 4:12].values
y = df['area_category'].values

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

# Create a KNN classifier object
k = 5
knn_classifier = KNeighborsClassifier(n_neighbors = k)

# Fit the classifier on the training data
knn_classifier.fit(X_train, y_train)

# Predict the test set labels
y_pred = knn_classifier.predict(X_test)

# Evaluate the classifier
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

from sklearn.svm import SVC
from sklearn.metrics import classification_report

# Convert the month and day columns to numerical values
months = {'jan': 1, 'feb': 2, 'mar': 3, 'apr': 4, 'may': 5, 'jun': 6,
          'jul': 7, 'aug': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dec': 12}
days = {'mon': 1, 'tue': 2, 'wed': 3, 'thu': 4, 'fri': 5, 'sat': 6, 'sun': 7}
df['month'] = df['month'].map(months)
df['day'] = df['day'].map(days)

# Convert the area column to a binary column indicating if there was a fire or not
df['fire'] = (df['area'] > 0).astype(int)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df.drop(['area', 'fire'], axis=1), df['fire'], test_size=0.2, random_state=42)

# Train the SVM model
clf = SVC(kernel='linear')
clf.fit(X_train, y_train)

# Evaluate the model on the testing data
y_pred = clf.predict(X_test)
print(classification_report(y_test, y_pred))

from sklearn.tree import DecisionTreeClassifier

# Convert the area column to a binary column indicating if there was a fire or not
df['fire'] = (df['area'] > 0).astype(int)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df.drop(['area', 'fire'], axis=1), df['fire'], test_size=0.2, random_state=42)

# Train the decision tree model
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Evaluate the model on the testing data
y_pred = clf.predict(X_test)
print(classification_report(y_test, y_pred))